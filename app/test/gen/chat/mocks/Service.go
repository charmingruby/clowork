// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/charmingruby/clowork/internal/chat/usecase"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: ctx, in
func (_m *Service) CreateRoom(ctx context.Context, in usecase.CreateRoomInput) (string, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateRoomInput) (string, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateRoomInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.CreateRoomInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinRoom provides a mock function with given fields: ctx, in
func (_m *Service) JoinRoom(ctx context.Context, in usecase.JoinRoomInput) (string, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for JoinRoom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.JoinRoomInput) (string, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.JoinRoomInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.JoinRoomInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaveRoom provides a mock function with given fields: ctx, in
func (_m *Service) LeaveRoom(ctx context.Context, in usecase.LeaveRoomInput) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for LeaveRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.LeaveRoomInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRooms provides a mock function with given fields: ctx, page
func (_m *Service) ListRooms(ctx context.Context, page int) (usecase.ListRoomsOutput, error) {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for ListRooms")
	}

	var r0 usecase.ListRoomsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (usecase.ListRoomsOutput, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) usecase.ListRoomsOutput); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Get(0).(usecase.ListRoomsOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, in
func (_m *Service) SendMessage(ctx context.Context, in usecase.SendMessageInput) (string, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SendMessageInput) (string, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SendMessageInput) string); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.SendMessageInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
