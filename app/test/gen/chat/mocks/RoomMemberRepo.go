// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/charmingruby/clowork/internal/chat/model"
	mock "github.com/stretchr/testify/mock"
)

// RoomMemberRepo is an autogenerated mock type for the RoomMemberRepo type
type RoomMemberRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, member
func (_m *RoomMemberRepo) Create(ctx context.Context, member model.RoomMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsInRoom provides a mock function with given fields: ctx, roomID, nickname, hostname
func (_m *RoomMemberRepo) ExistsInRoom(ctx context.Context, roomID string, nickname string, hostname string) (bool, error) {
	ret := _m.Called(ctx, roomID, nickname, hostname)

	if len(ret) == 0 {
		panic("no return value specified for ExistsInRoom")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, roomID, nickname, hostname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, roomID, nickname, hostname)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, roomID, nickname, hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDInRoom provides a mock function with given fields: ctx, memberID, roomID
func (_m *RoomMemberRepo) FindByIDInRoom(ctx context.Context, memberID string, roomID string) (model.RoomMember, error) {
	ret := _m.Called(ctx, memberID, roomID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDInRoom")
	}

	var r0 model.RoomMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.RoomMember, error)); ok {
		return rf(ctx, memberID, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.RoomMember); ok {
		r0 = rf(ctx, memberID, roomID)
	} else {
		r0 = ret.Get(0).(model.RoomMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, memberID, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, member
func (_m *RoomMemberRepo) UpdateStatus(ctx context.Context, member model.RoomMember) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomMember) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoomMemberRepo creates a new instance of RoomMemberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomMemberRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomMemberRepo {
	mock := &RoomMemberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
