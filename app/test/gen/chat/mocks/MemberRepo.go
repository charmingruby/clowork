// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/charmingruby/clowork/internal/chat/model"
	mock "github.com/stretchr/testify/mock"
)

// MemberRepo is an autogenerated mock type for the MemberRepo type
type MemberRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, member
func (_m *MemberRepo) Create(ctx context.Context, member model.Member) error {
	ret := _m.Called(ctx, member)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Member) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsInRoom provides a mock function with given fields: ctx, roomID, nickname, hostname
func (_m *MemberRepo) ExistsInRoom(ctx context.Context, roomID string, nickname string, hostname string) (bool, error) {
	ret := _m.Called(ctx, roomID, nickname, hostname)

	if len(ret) == 0 {
		panic("no return value specified for ExistsInRoom")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, roomID, nickname, hostname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, roomID, nickname, hostname)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, roomID, nickname, hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMemberRepo creates a new instance of MemberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberRepo {
	mock := &MemberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
