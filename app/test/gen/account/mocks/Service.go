// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/charmingruby/clowork/internal/account/usecase"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// SignIn provides a mock function with given fields: ctx, in
func (_m *Service) SignIn(ctx context.Context, in usecase.SignInInput) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SignInInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: ctx, in
func (_m *Service) SignUp(ctx context.Context, in usecase.SignUpInput) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SignUpInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
